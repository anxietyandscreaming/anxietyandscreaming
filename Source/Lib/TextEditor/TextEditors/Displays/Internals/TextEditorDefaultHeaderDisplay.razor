@using Clair.TextEditor.RazorLib.TextEditors.Models
@using Clair.TextEditor.RazorLib.TextEditors.Models.Internals

@{
	var renderBatch = GetVirtualizationResult();
	var componentData = GetComponentData();
}

@if (!renderBatch.IsValid || componentData is null)
{
	<div class="ci_te_text-editor-header @componentData?.WrapperCssClass @TextEditorService.ThemeCssClassString"
	     style="@componentData?.WrapperCssStyle">
    </div>
}
else
{
	<div class="ci_te_text-editor-header @componentData.WrapperCssClass @TextEditorService.ThemeCssClassString"
	     style="@componentData.WrapperCssStyle">
	    <div class="ci_te_text-editor-header-listing"
	         style="overflow-y: hidden;">
	        
	        @{
	            var model = TextEditorService.TextEditorState;
	
	            if (model is not null)
	            {
	            	var appOptionsState = TextEditorService.CommonService.GetAppOptionsState();
	            
	                /* (2024-08-09)
	                var localHeaderButtonKindsList = HeaderButtonKinds;
	
	                if (localHeaderButtonKindsList is null)
	                {
	                    localHeaderButtonKindsList = Enum
	                        .GetValues(typeof(HeaderButtonKind))
	                        .Cast<HeaderButtonKind>()
	                        .ToImmutableArray();
	                }
	                */
	                
	                var localHeaderButtonKindsList = Enum
	                    .GetValues(typeof(HeaderButtonKind))
	                    .Cast<HeaderButtonKind>();
	
	                foreach (var headerButtonKind in localHeaderButtonKindsList)
	                {
	                    <div class="ci_te_text-editor-header-entry">
	                        @switch (headerButtonKind)
	                        {
	                            case HeaderButtonKind.Cut:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                		@onclick="DoCutOnClick">
	                                    @IconRenderer.Render(IconKind.Note, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.Copy:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                		@onclick="DoCopyOnClick">
										@IconRenderer.Render(IconKind.Copy, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.Paste:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                		@onclick="DoPasteOnClick">
	                                    @IconRenderer.Render(IconKind.Clippy, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.Undo:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                        disabled=@GetUndoDisabledAttribute()
	                                		@onclick="DoUndoOnClick">
	                                    @IconRenderer.Render(IconKind.ArrowLeft, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.Redo:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                        disabled=@GetRedoDisabledAttribute()
	                                		@onclick="DoRedoOnClick">
	                                    @IconRenderer.Render(IconKind.ArrowRight, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.Save:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                		@onclick="DoSaveOnClick">
	                                    @IconRenderer.Render(IconKind.Save, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                            case HeaderButtonKind.SelectAll:
	                                <button title="@headerButtonKind.ToString()"
	                                        class="ci_button"
	                                		@onclick="DoSelectAllOnClick">
	                                    @IconRenderer.Render(IconKind.ListSelection, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                                </button>
	                                break;
	                        }
	                    </div>
	                }
	
	                <div class="ci_te_text-editor-header-entry">
	                    <button title="Measure editor size"
	                            class="ci_button"
	                    		@onclick="DoRemeasureOnClick">
							@IconRenderer.Render(IconKind.SymbolRuler, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                    </button>
	                </div>
	                
	                <div class="ci_te_text-editor-header-entry">
	                    <button title="Reload"
	                            class="ci_button"
	                            id="@_reloadButtonHtmlElementId"
	                    		@onclick="DoReloadOnClick">
							@IconRenderer.Render(IconKind.Refresh, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
	                    </button>
	                </div>
	            }
	            else
	            {
	                <div class="ci_te_text-editor-header-entry ci_te_text-editor-header-file-sizing">
	                    <div>The @nameof(TextEditorModel) was null</div>
	                </div>
	            }
	        }
	    </div>
	</div>
}
@using Clair.Common.RazorLib;
@using Clair.Common.RazorLib.Resizes.Displays
@using Clair.Extensions.DotNet.TestExplorers.Displays.Internals
@using Clair.Extensions.DotNet.TestExplorers.Models

@{
	var testExplorerState = DotNetService.GetTestExplorerState();
	var appOptionsState = DotNetService.IdeService.TextEditorService.CommonService.GetAppOptionsState();

	if (!DotNetService.IdeService.TextEditorService.CommonService.TryGetTreeViewContainer(
			TestExplorerState.TreeViewTestExplorerKey,
			out var treeViewContainer))
	{
		treeViewContainer = null;
	}

	var renderBatch = new TestExplorerRenderBatch(
		testExplorerState,
		appOptionsState,
		treeViewContainer);
}

@* ContextRecord="ContextFacts.TestExplorerContext" *@

<div class="ci_ide_test-explorer" style="height: 100%; width: 100%;">
    <div class="ci_section-body">

		@if (renderBatch.TreeViewContainer is null)
		{
			<div>renderBatch.TreeViewContainer is null</div>
		}
		else
		{
			var renderBatchValidated = new TestExplorerRenderBatchValidated(renderBatch);
			<CascadingValue Value="renderBatchValidated">

				<div class="ci_ide_test-explorer-top"
				     style="height: 1.8em;"
				     title="Sln: @(renderBatchValidated.TestExplorerState.SolutionFilePath ?? "null");">
				     
					<button class="ci_button"
							style="display: inline;"
							title="Discover tests for all projects"
							@onclick="DispatchShouldDiscoverTestsEffect">
						@IconRenderer.Render(IconKind.Refresh, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
					</button>
					
					<button class="ci_button"
							style="display: inline;"
							title="Stop current test"
							disabled=@GetIsKillProcessDisabled()
							@onclick="KillExecutionProcessOnClick">
						@IconRenderer.Render(IconKind.StopCircle, appOptionsState.Options.IconSizeInPixels, appOptionsState.Options.IconSizeInPixels)
					</button>
					
					Total: @(renderBatchValidated.TestExplorerState.TotalTestCount);
					<span class="ci_tree-view-warning">NotRan: @(renderBatchValidated.TestExplorerState.NotRanTestHashSet.Count);</span>
					<em class="ci_em">Passed: @(renderBatchValidated.TestExplorerState.PassedTestHashSet.Count);</em>
					<span class="ci_tree-view-exception">Failed: @(renderBatchValidated.TestExplorerState.FailedTestHashSet.Count);</span>
				</div>

				<div class="ci_ide_test-explorer-bottom"
					 style="display: flex; height: calc(100% - 1.8em);">

					<TestExplorerTreeViewDisplay ElementDimensions="renderBatchValidated.TestExplorerState.TreeViewElementDimensions"/>

					<div class="ci_resize-column"
                         style="@DotNetService.CommonService.Options_ResizeHandleCssWidth"
                         @onmousedown="() => SubscribeToDragEvent()">
                    </div>

					<TestExplorerDetailsDisplay ElementDimensions="renderBatchValidated.TestExplorerState.DetailsElementDimensions"/>
				</div>
			</CascadingValue>
		}
    </div>
</div>
